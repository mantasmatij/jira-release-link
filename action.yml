name: 'Jira Release Link'
description: 'Assigns Jira issues to a release version by version name and ticket list'
inputs:
  jira-email:
    required: true
    description: 'Jira user email'
  jira-token:
    required: true
    description: 'Jira API token'
  jira-domain:
    required: true
    description: 'Jira domain (e.g. company.atlassian.net)'
  jira-project:
    required: true
    description: 'Jira project key'
  release-prefix:
    required: true
    description: 'Release name prefix (e.g. Connex Release)'
  major-version:
    required: true
    description: 'Major version number'
  tickets:
    required: true
    description: 'Comma-separated list of Jira ticket keys'
runs:
  using: "composite"
  steps:
    - name: Get Jira version ID
      shell: bash
      run: |
        release_name="${{ inputs.release-prefix }} ${{ inputs.major-version }}"
        response=$(curl -s -u "${{ inputs.jira-email }}:${{ inputs.jira-token }}" \
          -H "Accept: application/json" \
          "https://${{ inputs.jira-domain }}/rest/api/2/project/${{ inputs.jira-project }}/versions")
        version_id=$(echo "$response" | jq -r --arg name "$release_name" '.[] | select(.name|gsub("^\\s+|\\s+$";"") == $name) | .id')
        if [[ -z "$version_id" ]]; then
          echo "Could not find Jira version ID for $release_name"
          exit 1
        fi
        echo "version_id=$version_id" >> $GITHUB_ENV
    - name: Assign tickets to Jira Release
      shell: bash
      run: |
        for ticket in $(echo "${{ inputs.tickets }}" | tr ',' ' '); do
          curl -X PUT \
            -u "${{ inputs.jira-email }}:${{ inputs.jira-token }}" \
            -H "Content-Type: application/json" \
            --data "{\"update\":{\"fixVersions\":[{\"add\":{\"id\":\"$version_id\"}}]}}" \
            "https://${{ inputs.jira-domain }}/rest/api/2/issue/$ticket"
        done